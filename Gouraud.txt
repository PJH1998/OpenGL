#version 400 core

	attribute vec4 vtxPosition;

	attribute vec4 a_Color;
	out vec4 v_Color;

	uniform mat4 trans;
	uniform mat4 ViewMat;
	uniform mat4 ProMat;
	uniform mat4 X_CRMat;
	uniform mat4 Y_CRMat;
	uniform mat4 F_Rotate;
	uniform mat4 S_Rotate;
	uniform mat4 T_Rotate;

	uniform vec3 uLightPos;
	uniform vec3 LightColor;
	uniform vec3 D_LightDir;

void main()
{	
	
	mat4 worldMat = S_Rotate * trans * F_Rotate;
	vec4 vPos = ViewMat * worldMat * vtxPosition;
	vec3 inNormal = normalize(vtxPosition.xyz);

	vec4 vLightPos = ViewMat * vec4(uLightPos, 1.0);

	vec3 lightDir = normalize(vLightPos.xyz - vPos.xyz); //Point
	vec3 lightDir2 = normalize(-D_LightDir); //Direction
	vec4 transNorm = ViewMat * worldMat * vec4(inNormal, 0.0);
	vec3 tNorm = normalize(transNorm.xyz);
	
	v_Color = dot(lightDir, tNorm.xyz) * dot(lightDir2, tNorm.xyz) * a_Color ;
	vec3 reflectedLight = normalize(reflect(lightDir, tNorm.xyz));
	vec3 reflectedLight2 = normalize(reflect(lightDir2, tNorm.xyz));
	vec3 viewDir = normalize(vec3(0,0,0) - vPos.xyz);
	v_Color += vec4(dot(reflectedLight, viewDir) * dot(reflectedLight2, viewDir) * LightColor, 0.0);

	gl_Position = ProMat * Y_CRMat * X_CRMat * T_Rotate * vPos;

}